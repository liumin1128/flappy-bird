// ÊéßÂà∂ÈöúÁ¢çÁâ©ÁîüÊàê‰∏éÁßªÂä®ÁöÑËá™ÂÆö‰πâ Hook üê± ÂñµÔΩû
import { useCallback, useEffect, useState } from "react";
import type { Obstacle } from "../types/obstacle-types";

const PIPE_WIDTH = 60;
const GAP_HEIGHT = 120;
const OBSTACLE_SPEED = 1.5; // px/step

// ‰øÆÊîπ getRandomTop ÊîØÊåÅÂä®ÊÄÅ gap
function getRandomTop(gap: number) {
  const min = 60;
  const max = window.innerHeight - gap - 60;
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

let obstacleId = 0;

// Êñ∞Â¢ûÔºöÂä®ÊÄÅË∞ÉÊï¥Èó¥ÈöîÂíåÁ©∫Èöô
function getDynamicParams(score: number) {
  // Èó¥ÈöîÊúÄÂ∞è 3000msÔºåÊúÄÂ§ß 4800msÔºåÈöèÂàÜÊï∞Á∫øÊÄßÈÄíÂáè
  const minInterval = 2000 * 1.5;
  const maxInterval = 3200 * 1.5;
  const interval = Math.max(
    minInterval,
    maxInterval - Math.floor(score * 20 * 1.5)
  );
  // Á©∫ÈöôÊúÄÂ∞è 165pxÔºåÊúÄÂ§ß 270pxÔºåÈöèÂàÜÊï∞Á∫øÊÄßÈÄíÂáè
  const minGap = 110 * 1.5;
  const maxGap = 180 * 1.5;
  const gap = Math.max(minGap, maxGap - Math.floor(score * 2 * 1.5));
  return { interval, gap };
}

export function useObstacle(
  isStarted: boolean,
  isGameOver: boolean,
  birdRect: DOMRect | null,
  onGameOver?: () => void
) {
  const [obstacles, setObstacles] = useState<Obstacle[]>([]);
  const [score, setScore] = useState(0);
  const [gapHeight, setGapHeight] = useState(GAP_HEIGHT);
  const [obstacleInterval, setObstacleInterval] = useState(1600);

  // ÁîüÊàêÈöúÁ¢çÁâ©Ôºåx ‰∏∫Â±èÂπïÊúÄÂè≥‰æß üê± ÂñµÔΩû
  const generateObstacle = useCallback(() => {
    setObstacles((prev) => {
      const { gap } = getDynamicParams(score);
      setGapHeight(gap);
      // Èò≤Ê≠¢ÈöúÁ¢çÁâ©ÈáçÂè†ÔºöÊñ∞ÈöúÁ¢çÁâ©‰∏é‰∏ä‰∏Ä‰∏™ÈöúÁ¢çÁâ©Ë∑ùÁ¶ªÈúÄÂ§ß‰∫é PIPE_WIDTH + 80
      const minDistance = PIPE_WIDTH + 80;
      if (prev.length > 0) {
        const last = prev[prev.length - 1];
        if (
          last.x >
          (typeof window !== "undefined" ? window.innerWidth : 400) -
            minDistance
        ) {
          // Ë∑ùÁ¶ª‰∏çÂ§üÔºå‰∏çÁîüÊàê
          return prev;
        }
      }
      return [
        ...prev,
        {
          id: obstacleId++,
          x: typeof window !== "undefined" ? window.innerWidth : 400,
          top: getRandomTop(gap),
          passed: false,
        },
      ];
    });
  }, [score]);

  // ÈöèÂàÜÊï∞Âä®ÊÄÅË∞ÉÊï¥ÈöúÁ¢çÁâ©ÁîüÊàêÈó¥Èöî üê± ÂñµÔΩû
  useEffect(() => {
    const { interval } = getDynamicParams(score);
    setObstacleInterval(interval);
  }, [score]);

  // ÂÆöÊó∂ÁîüÊàêÈöúÁ¢çÁâ© üê± ÂñµÔΩû
  useEffect(() => {
    if (!isStarted || isGameOver) return;
    generateObstacle(); // Á´ãÂç≥ÁîüÊàêÁ¨¨‰∏Ä‰∏™
    const interval = setInterval(() => {
      generateObstacle();
    }, obstacleInterval);
    return () => clearInterval(interval);
  }, [isStarted, isGameOver, generateObstacle, obstacleInterval]);

  // ÁßªÂä®ÈöúÁ¢çÁâ© üê± ÂñµÔΩû
  const moveObstacles = useCallback(() => {
    setObstacles(
      (prev) =>
        prev
          .map((obs) => ({ ...obs, x: obs.x - OBSTACLE_SPEED }))
          .filter((obs) => obs.x + PIPE_WIDTH > 0) // Ë∂ÖÂá∫Â±èÂπïÂ∑¶‰æßÂàôÈîÄÊØÅ
    );
  }, []);

  // ÈöúÁ¢çÁâ©ÁßªÂä®Âä®Áîª üê± ÂñµÔΩû
  useEffect(() => {
    if (!isStarted || isGameOver) return;
    const interval = setInterval(() => {
      moveObstacles();
    }, 16);
    return () => clearInterval(interval);
  }, [isStarted, isGameOver, moveObstacles]);

  // ÂæóÂàÜ‰∏éÁ¢∞ÊíûÂà§ÂÆö üê± ÂñµÔΩû
  useEffect(() => {
    if (!isStarted || isGameOver || !birdRect) return;
    setObstacles((prev) =>
      prev.map((obs) => {
        if (!obs.passed && obs.x + PIPE_WIDTH < birdRect.left) {
          setScore((s) => s + 1);
          return { ...obs, passed: true };
        }
        return obs;
      })
    );
    // ‰øÆÊ≠£Á¢∞ÊíûÊ£ÄÊµãÔºöÂè™ÊúâÂ∞èÈ∏üÂÆåÂÖ®Âú® gap Âå∫ÂüüÊâçÁÆóÈÄöËøáÔºåÂê¶ÂàôÂà§ÂÆö‰∏∫Á¢∞Êíû
    for (const obs of obstacles) {
      const pipeLeft = obs.x;
      const pipeRight = obs.x + PIPE_WIDTH;
      const gapTop = obs.top;
      const gapBottom =
        obs.top + (typeof gapHeight === "number" ? gapHeight : GAP_HEIGHT);
      // Â∞èÈ∏ü‰∏éÈöúÁ¢çÁâ© x Âå∫ÂüüÈáçÂè†
      if (birdRect.right > pipeLeft && birdRect.left < pipeRight) {
        // Âè™Ë¶ÅÊúâ‰∏ÄÈÉ®ÂàÜË∂ÖÂá∫ gap Âå∫ÂüüÂ∞±ÁÆóÁ¢∞Êíû
        if (birdRect.top < gapTop || birdRect.bottom > gapBottom) {
          if (onGameOver) {
            onGameOver();
            return;
          }
        }
      }
    }
  }, [isStarted, isGameOver, birdRect, obstacles, gapHeight, onGameOver]);

  // ÈáçÁΩÆ üê± ÂñµÔΩû
  const reset = useCallback(() => {
    setObstacles([]);
    setScore(0);
    obstacleId = 0;
  }, []);

  return {
    obstacles,
    score,
    generateObstacle,
    moveObstacles,
    reset, // Á°Æ‰øù reset ÂØºÂá∫
    gapHeight,
  };
}
